---

---

<div id="container">
	<main>
		<h1>a11y liquid font</h1>
		<div id="window-width">ウィンドウ幅: <span id="width-value">0</span>px</div>
		<div id="base-font-size">
			<span>ブラウザの基本フォントサイズ: <span id="base-font-value">0</span>px</span>
		</div>
		<div id="font-size-info">
			<span id="vw-value">2</span>vw = <span id="px-value">0</span>px
		</div>
		<p><span>"--window-width-to-rem: calc(1rem / 100 * 10 / 16 * var(--window-width));"</span></p>
		<div class="window-width-to-rem">
			<span> = <span id="rem-to-px">0</span>px</span>
		</div>
		
	</main>
</div>

<style>
	h1 {
		font-size: 2rem;
	}
	
	#window-width {
		margin-top: 1rem;
		font-size: 1.2rem;
		background: #000;
		color: #fff;
		width: fit-content;
		padding: 0.5rem;
	}
	#base-font-size {
		margin-top: 1rem;
		background: #000;
		color: #fff;
		width: fit-content;
		padding: 0.5rem;
	}

	#font-size-info {
		margin-top: 0.5rem;
		font-size: 2vw;
	}

	@property --100vw {
		syntax: "<length>";
		initial-value: 0px;
		inherits: false;
	}
	:root {
		--100vw: 100vw;
		--window-width: tan(atan2(var(--100vw), 1px));
		--window-width-to-rem: calc(1rem * var(--window-width));
		--window-width-to-rem: calc(1rem * max(375, var(--window-width)) / 375);
		--window-width-to-rem: calc(1rem / 100 * 10 / 16 * var(--window-width));
		/* --rem-sp: calc(1.3rem * max(375, var(--window-width)) / 375); */
	}
	.window-width-to-rem {
		font-size: var(--window-width-to-rem);
	}

</style>

<script>
	function updateWindowWidth() {
		const widthElement = document.getElementById('width-value');
		if (widthElement) {
			widthElement.textContent = window.innerWidth.toString();
		}
	}

	function updateFontSize() {
		const vwValue = 2; // 1vwを指定
		const pxValue = (window.innerWidth * vwValue) / 100;
		const pxElement = document.getElementById('px-value');
		if (pxElement) {
			pxElement.textContent = pxValue.toString();
		}
	}

	function updateRemToPx() {
		const remElement = document.querySelector('.window-width-to-rem');
		if (remElement) {
			const computedStyle = window.getComputedStyle(remElement);
			const fontSize = parseFloat(computedStyle.fontSize);
			const remToPxElement = document.getElementById('rem-to-px');
			if (remToPxElement) {
				remToPxElement.textContent = fontSize.toString();
			}
		}
	}

	function updateBaseFontSize() {
		const htmlElement = document.documentElement;
		const computedStyle = window.getComputedStyle(htmlElement);
		const baseFontSize = parseFloat(computedStyle.fontSize);
		const baseFontElement = document.getElementById('base-font-value');
		if (baseFontElement) {
			baseFontElement.textContent = baseFontSize.toString();
		}
	}

	// 初期表示時
	updateWindowWidth();
	updateFontSize();
	updateRemToPx();
	updateBaseFontSize();

	// リサイズ時に更新
	window.addEventListener('resize', () => {
		updateWindowWidth();
		updateFontSize();
		updateRemToPx();
		updateBaseFontSize();
	});

	// フォントサイズの変更を監視
	const observer = new ResizeObserver(() => {
		updateBaseFontSize();
	});
	observer.observe(document.documentElement);

	// MutationObserverでフォントサイズの変更を監視
	const mutationObserver = new MutationObserver((mutations) => {
		mutations.forEach((mutation) => {
			if (mutation.type === 'attributes' && mutation.attributeName === 'style') {
				updateBaseFontSize();
			}
		});
	});

	// html要素の変更を監視
	mutationObserver.observe(document.documentElement, {
		attributes: true,
		attributeFilter: ['style']
	});

	// 定期的にフォントサイズをチェック
	setInterval(updateBaseFontSize, 500);
</script>
